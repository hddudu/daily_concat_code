package com.hongdu.src.datastructurejava.tree.base;

/**
 ================================================================= 终极java参考 ：
                            https://www.cnblogs.com/hapjin/p/4456785.html
        迭代器的构造 ================》 实现 迭代器接口
 =================================================================
 * 二叉树的基本结构
 *      二叉树操作的基本API：
 *          遍历api：
 *              递归：============》
 *                  前序
 *                  中序
 *                  后序
 *              非递归：============》
 *                  前序
 *                  中序
 *                  后序
 *          层次遍历：
 *
 *          是否是空树
 *          树的节点个数
 *          查询指定值的节点
 *          求取叶子节点个数
 *
 * （
 *     遍历
 * 前序遍历
 * 中序遍历
 * 后序遍历
 * 层序遍历
 * 查找
 * 查找最大值
 * 查找最小值
 * 查找指定值
 * 获取指定属性
 * 获取总节点/叶节点数量
 * 获取二叉树的高度(根的高度为1)
 * 行为操作
 * 插入
 * 删除
 * ）
 * 1. 二叉树创建 --》2. 二叉树拷贝 --》3. 前序遍历---递归 --》
 * 4.  前序遍历---非递归 --》5. 中序遍历---递归 --》6. 中序遍历---非递归 --》
 * 7. 后续遍历---递归 --》8. 后续遍历---非递归 --》9. 层序遍历 --》
 * 10. 二叉树的销毁 --》11. 二叉树的镜像---非递归 --》12. 二叉树的镜像---递归 --》
 * 13. 求二叉树中结点的个数 --》14.  求二叉树中叶子结点的个数 --15. 求二叉树中第K层结点的个数 --》
 * 16. 求二叉树的高度 --》17.  在二叉树中查找值为data的结点，找到返回该结点，否则返回空 --》
 * 18. 检测一个节点是否在二叉树中 --》19.  检测一棵树是否为完全二叉树
 */
public class TreeNode<E> {

}
